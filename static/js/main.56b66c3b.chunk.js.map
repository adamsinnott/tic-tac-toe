{"version":3,"sources":["components/grid.jsx","containers/TicTacToeApp.jsx","App.js","serviceWorker.js","index.js"],"names":["Grid","props","react_default","a","createElement","className","playerTurn","onClick","event","clickCell","target","id","gameState","length","TicTacToeApp","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initialiseGameState","bind","assertThisInitialized","switchPlayer","setCell","cellEmpty","checkForAWinner","checkArrayEqual","getHorizontalLine","getVerticalLine","getDiagonalLines","state","winner","numberOfPlayers","width","Error","y","eachRow","Array","fill","tempGameState","push","setState","console","log","value","_value$split","split","_value$split2","slicedToArray","x","tempState","arr","every","v","index","map","diagonals","left","right","i","array","horizonalArray","veticalArray","grid","React","Component","App","containers_TicTacToeApp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56b66c3b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Grid = (props) => {\r\n    return (\r\n        // I think I should programatically build this up\r\n        <table className={props.playerTurn}>\r\n            <tbody>\r\n                <tr><td><span onClick={(event) => props.clickCell(event.target.id)} id=\"0_0\" className={props.gameState.length > 0 ? props.gameState[0][0] : \"not-selected\"}>&nbsp;</span></td><td><span onClick={(event) => props.clickCell(event.target.id)} id=\"0_1\" className={props.gameState.length > 0 ? props.gameState[0][1] : \"not-selected\"}>&nbsp;</span></td><td><span onClick={(event) => props.clickCell(event.target.id)} id=\"0_2\" className={props.gameState.length > 0 ? props.gameState[0][2] : \"not-selected\"}>&nbsp;</span></td></tr>\r\n                <tr><td><span onClick={(event) => props.clickCell(event.target.id)} id=\"1_0\" className={props.gameState.length > 0 ? props.gameState[1][0] : \"not-selected\"}>&nbsp;</span></td><td><span onClick={(event) => props.clickCell(event.target.id)} id=\"1_1\" className={props.gameState.length > 0 ? props.gameState[1][1] : \"not-selected\"}>&nbsp;</span></td><td><span onClick={(event) => props.clickCell(event.target.id)} id=\"1_2\" className={props.gameState.length > 0 ? props.gameState[1][2] : \"not-selected\"}>&nbsp;</span></td></tr>\r\n                <tr><td><span onClick={(event) => props.clickCell(event.target.id)} id=\"2_0\" className={props.gameState.length > 0 ? props.gameState[2][0] : \"not-selected\"}>&nbsp;</span></td><td><span onClick={(event) => props.clickCell(event.target.id)} id=\"2_1\" className={props.gameState.length > 0 ? props.gameState[2][1] : \"not-selected\"}>&nbsp;</span></td><td><span onClick={(event) => props.clickCell(event.target.id)} id=\"2_2\" className={props.gameState.length > 0 ? props.gameState[2][2] : \"not-selected\"}>&nbsp;</span></td></tr>\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Grid;","import React from \"react\";\r\n// import containers and components\r\nimport Grid from \"../components/grid\";\r\n\r\nclass TicTacToeApp extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        // bind functions here\r\n        this.initialiseGameState=this.initialiseGameState.bind(this);\r\n        this.switchPlayer=this.switchPlayer.bind(this);\r\n        this.clickCell=this.clickCell.bind(this);\r\n        this.setCell=this.setCell.bind(this);\r\n        this.cellEmpty=this.cellEmpty.bind(this);\r\n        this.checkForAWinner=this.checkForAWinner.bind(this);\r\n        this.checkArrayEqual=this.checkArrayEqual.bind(this);\r\n        this.getHorizontalLine=this.getHorizontalLine.bind(this);\r\n        this.getVerticalLine=this.getVerticalLine.bind(this);\r\n        this.getDiagonalLines=this.getDiagonalLines.bind(this);\r\n\r\n        //state location\r\n        this.state = {\r\n            // player 1 is equal to \"player1\" and player 2 is equal to \"player2\"\r\n            // this needs to come from a stored global value\r\n            playerTurn: \"player1\",\r\n            winner: \"no-winner\",\r\n            // TODO break this out to its own class and determine how to interact with its state\r\n            gameState: [],\r\n            numberOfPlayers: 2,\r\n        };\r\n    };\r\n\r\n    // use this to initialse the grid method\r\n    // only when the component loads\r\n    componentDidMount () {\r\n        this.initialiseGameState(3);\r\n    }\r\n\r\n    initialiseGameState (width) {\r\n        // validate the input \r\n        if (typeof width !== \"number\"){\r\n            throw new Error (\"Width must be a number\")\r\n        }\r\n        if (width < 3 || width > 5) {\r\n            throw new Error (\"Width must be between 3 and 5\")\r\n        }\r\n\r\n        // start with creating the rows\r\n        for (let y=0; y < 3; y++) {\r\n            // initialise each row with an empty array of 0s\r\n            let eachRow = new Array(3).fill(\"not-selected\");\r\n            let tempGameState = this.state.gameState;\r\n            tempGameState.push(eachRow);\r\n            // ADAM fix this, it will not reset state before setting again\r\n            // understand how to do this. You are not using best practice\r\n            this.setState({gameState: tempGameState})\r\n        }\r\n        console.log(this.state.gameState)\r\n    }\r\n\r\n    switchPlayer () {\r\n        if (this.state.playerTurn===\"player1\") {\r\n            this.setState({playerTurn:\"player2\"})\r\n        }   \r\n        else if (this.state.playerTurn===\"player2\") {\r\n            this.setState({playerTurn:\"player1\"})\r\n        }\r\n    }\r\n\r\n    setCell (value) {\r\n        const [ x, y ] = value.split('_');\r\n        if (this.cellEmpty(x,y)) {\r\n            let tempState = this.state.gameState;\r\n            if (tempState[x][y]==\"not-selected\") {\r\n                tempState[x][y]=this.state.playerTurn;\r\n                this.setState({gameState:tempState})\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    cellEmpty (x, y) {\r\n        if (this.state.gameState[x][y]===\"not-selected\") {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    clickCell (value) {\r\n        console.log(\"click cell: \"+value)\r\n        if (this.state.winner === \"no-winner\") {\r\n            if (this.state.playerTurn===\"player1\") {\r\n                console.log(\"inside player 1\")\r\n                if (this.setCell(value)) {\r\n                    this.checkForAWinner();\r\n                    this.switchPlayer();\r\n                }\r\n            }\r\n            else if (this.state.playerTurn===\"player2\" && this.state.numberOfPlayers===2) {\r\n                console.log(\"inside player 1\")\r\n                if (this.setCell(value)) {\r\n                    this.checkForAWinner();\r\n                    this.switchPlayer();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    checkArrayEqual (arr) {\r\n        return arr.every( v => v === arr[0] && v !== \"not-selected\" );\r\n    } \r\n\r\n    getHorizontalLine (arr, index) {\r\n        return arr[index];\r\n    }\r\n\r\n    getVerticalLine (arr, index) {\r\n        return  arr.map(x => x[index]);\r\n    }\r\n\r\n    getDiagonalLines (arr) {\r\n        let diagonals = { left: [], right: [] };\r\n        for (let i=0; i<arr.length; i++){\r\n            diagonals.left.push(arr[i][i]);\r\n            diagonals.right.push(arr[arr.length-i-1][i]);\r\n            console.log(diagonals.right);\r\n        }\r\n        return diagonals;\r\n    }\r\n\r\n\r\n    checkForAWinner () {\r\n        let playerWon;\r\n        let array = this.state.gameState;\r\n        let diagonals = this.getDiagonalLines(array)\r\n        if (this.checkArrayEqual(diagonals.left)) {\r\n            this.setState({winner: diagonals.left[0]+\"Winner\"})\r\n        }\r\n        else if (this.checkArrayEqual(diagonals.right)) {\r\n            this.setState({winner: diagonals.right[0]+\"Winner\"})\r\n        }\r\n        else {\r\n            for (let i=0;i<array.length;i++) {\r\n                let horizonalArray = this.getHorizontalLine(array, i);\r\n                let veticalArray = this.getVerticalLine(array, i);\r\n                if (this.checkArrayEqual(horizonalArray)) {\r\n                    this.setState({winner: horizonalArray[0]+\"Winner\"})    \r\n                    break;                \r\n                }\r\n                if (this.checkArrayEqual(veticalArray)) {\r\n                    this.setState({winner: veticalArray[0]+\"Winner\"})\r\n                    break;  \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div id=\"app-wrapper\" className={this.state.winner}>\r\n                <Grid playerTurn={this.state.playerTurn} clickCell={this.clickCell} gameState={this.state.gameState}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TicTacToeApp;","import React, { Component } from 'react';\nimport './App.css';\nimport TicTacToeApp from \"./containers/TicTacToeApp\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Tic Tac Toe!</h1>\n        </header>\n        <main>\n          <TicTacToeApp />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}